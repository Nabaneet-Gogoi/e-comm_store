# Task ID: 3
# Title: Sanity Data Integration and API Layer
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Develop the data fetching layer in the Next.js frontend to interact with the Sanity API. Implement GROQ queries to retrieve product, category, and brand information efficiently.
# Details:
Create utility functions or hooks for fetching data. Consider server-side rendering (SSR) or static site generation (SSG) where appropriate for performance.

# Test Strategy:
Write unit tests for data fetching functions. Verify that product, category, and brand data can be successfully retrieved and logged in the Next.js application.

# Subtasks:
## 1. Configure Sanity Client and Establish Connection [pending]
### Dependencies: None
### Description: Set up the Sanity client in the Next.js project, ensuring secure and efficient access to the Sanity API.
### Details:
Install the `@sanity/client` package. Create a utility file (e.g., `lib/sanity.js`) to initialize the Sanity client using environment variables for `projectId`, `dataset`, and `apiVersion`. Ensure these environment variables are properly configured in `.env.local`.

## 2. Develop Core GROQ Queries for Products and Categories [pending]
### Dependencies: 3.1
### Description: Write efficient GROQ queries to retrieve essential product and category data from the Sanity content lake.
### Details:
Define specific GROQ queries for: 1) Fetching all products with key fields (e.g., `_id`, `title`, `slug`, `price`, `mainImage`). 2) Fetching a single product by its slug. 3) Fetching all categories with `_id`, `title`, `slug`. 4) Fetching products filtered by a specific category slug. Store these queries in a dedicated file (e.g., `lib/sanityQueries.js`).

## 3. Implement Reusable Sanity Data Fetching Utilities [pending]
### Dependencies: 3.1, 3.2
### Description: Create a set of reusable utility functions or custom hooks that encapsulate the Sanity data fetching logic, making it easy to integrate into Next.js components and pages.
### Details:
In `lib/sanity.js` (or a new `utils/sanity.js`), export functions such as `getProducts()`, `getProduct(slug)`, `getCategories()`, and `getProductsByCategory(categorySlug)`. These functions should use the initialized Sanity client (from Subtask 1) and the GROQ queries (from Subtask 2) to fetch and return data. Consider adding basic error handling.

## 4. Integrate Product and Category Data with Next.js Pages (SSR/SSG) [pending]
### Dependencies: 3.3
### Description: Apply the developed data fetching utilities to populate key Next.js pages, leveraging server-side rendering (SSR) or static site generation (SSG) for optimal performance.
### Details:
Implement data fetching for: 1) Product listing page (e.g., `/products`) using `getStaticProps` for SSG. 2) Individual product detail pages (e.g., `/products/[slug]`) using `getStaticPaths` and `getStaticProps` for SSG. 3) Category listing page (e.g., `/categories`) using `getStaticProps`. 4) Products by category pages (e.g., `/categories/[slug]`) using `getStaticPaths` and `getStaticProps`. Ensure proper data hydration on the client side.

## 5. Implement Brand Data Fetching and Refine API Layer [pending]
### Dependencies: 3.3, 3.4
### Description: Extend the data fetching layer to include brand information and perform a general refinement pass on the existing API layer for robustness, efficiency, and consistency.
### Details:
Define new GROQ queries for fetching all brands and a single brand by slug. Add corresponding utility functions (e.g., `getBrands()`, `getBrand(slug)`) to `lib/sanity.js`. Integrate brand data into relevant pages (e.g., a dedicated brands page or product detail pages). Review existing queries and fetching utilities for potential optimizations (e.g., more specific projections, better error handling, caching strategies if applicable).

